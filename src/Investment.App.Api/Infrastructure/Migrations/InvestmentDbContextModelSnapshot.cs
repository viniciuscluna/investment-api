// <auto-generated />
using System;
using Investment.App.Api.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Investment.App.Api.Infrastructure.Migrations
{
    [DbContext(typeof(InvestmentDbContext))]
    partial class InvestmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Investment.App.Api.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AvailableAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92a5f228-e11f-4223-9726-9487cf95ab6f"),
                            AvailableAmount = 5000m,
                            Name = "User 1"
                        });
                });

            modelBuilder.Entity("Investment.App.Api.Entities.CustomerInvestment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FinancialProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("InitialPurchaseAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UpdatedPurchaseAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FinancialProductId");

                    b.ToTable("CustomerInvestments");
                });

            modelBuilder.Entity("Investment.App.Api.Entities.CustomerInvestmentOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CustomerInvestmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerInvestmentId");

                    b.ToTable("CustomerInvestmentOperations");
                });

            modelBuilder.Entity("Investment.App.Api.Entities.FinancialProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MininumInvestment")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FinancialProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("251c9c19-0053-447a-bb64-06c5926a99d9"),
                            Description = "CDB Loren Ipsun",
                            Enabled = true,
                            Expires = new DateTime(2024, 11, 23, 4, 24, 15, 370, DateTimeKind.Utc).AddTicks(392),
                            MininumInvestment = 50m,
                            Name = "CDB",
                            RiskLevel = 5,
                            TimeStamp = new DateTime(2024, 6, 23, 4, 24, 15, 370, DateTimeKind.Utc).AddTicks(400)
                        },
                        new
                        {
                            Id = new Guid("ad8dbd67-1d38-4503-8f8f-3a4c82d52aad"),
                            Description = "LCI Loren Ipsun",
                            Enabled = true,
                            Expires = new DateTime(2024, 12, 23, 4, 24, 15, 370, DateTimeKind.Utc).AddTicks(404),
                            MininumInvestment = 500m,
                            Name = "LCI",
                            RiskLevel = 5,
                            TimeStamp = new DateTime(2024, 6, 23, 4, 24, 15, 370, DateTimeKind.Utc).AddTicks(405)
                        },
                        new
                        {
                            Id = new Guid("0e59f5c6-81a1-459d-84bc-2f187f275379"),
                            Description = "LCA Loren Ipsun",
                            Enabled = true,
                            Expires = new DateTime(2024, 6, 29, 4, 24, 15, 370, DateTimeKind.Utc).AddTicks(408),
                            MininumInvestment = 1000m,
                            Name = "LCA",
                            RiskLevel = 5,
                            TimeStamp = new DateTime(2024, 6, 23, 4, 24, 15, 370, DateTimeKind.Utc).AddTicks(428)
                        });
                });

            modelBuilder.Entity("Investment.App.Api.Entities.CustomerInvestment", b =>
                {
                    b.HasOne("Investment.App.Api.Entities.Customer", "Customer")
                        .WithMany("Investments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Investment.App.Api.Entities.FinancialProduct", "FinancialProduct")
                        .WithMany("Investments")
                        .HasForeignKey("FinancialProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FinancialProduct");
                });

            modelBuilder.Entity("Investment.App.Api.Entities.CustomerInvestmentOperation", b =>
                {
                    b.HasOne("Investment.App.Api.Entities.CustomerInvestment", "CustomerInvestment")
                        .WithMany("Operations")
                        .HasForeignKey("CustomerInvestmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerInvestment");
                });

            modelBuilder.Entity("Investment.App.Api.Entities.Customer", b =>
                {
                    b.Navigation("Investments");
                });

            modelBuilder.Entity("Investment.App.Api.Entities.CustomerInvestment", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Investment.App.Api.Entities.FinancialProduct", b =>
                {
                    b.Navigation("Investments");
                });
#pragma warning restore 612, 618
        }
    }
}
